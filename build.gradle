

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://github.com/UKHomeOffice/pttg-gradle-repo/raw/master/releases" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {

        classpath 'pttg-gradle-common:pttgCommonGradle:1.4.RELEASE'
        classpath 'pttg-gradle-common:pttgSpringBootGradle:1.1.RELEASE'

        classpath 'net.serenity-bdd:serenity-gradle-plugin:1.1.31'

        classpath "com.moowork.gradle:gradle-node-plugin:0.12"
        classpath "com.moowork.gradle:gradle-gulp-plugin:0.12"
    }
}

apply plugin: 'pttgCommonGradle'
apply plugin: 'pttgSpringBootGradle'
apply plugin: 'net.serenity-bdd.aggregator'
apply plugin: 'com.moowork.gulp'

group 'com.hod'
version '0.1.0'

mainClassName="uk.gov.digital.ho.proving.income.ServiceRunner"

if (System.getenv('VERSION')) {
  version = System.getenv('VERSION')
}


jar {
    baseName = 'pttg-ip-gt-ui'
    if (System.getenv('GIT_COMMIT')) {
      version = version + '.' + System.getenv('GIT_COMMIT')
    }
    manifest {
      attributes 'Implementation-Title': baseName,
                 'Implementation-Version': version
   }
}

jar.into('static') {
    from('src/main/webapp')
}

jar.mustRunAfter(gulp_build)

dependencies {
    compile libraries.groovy
    compile libraries.jackson
    compile libraries.jersey
    compile libraries.json
    compile libraries.logging
    compile libraries.springRetry
    compile 'org.apache.httpcomponents:httpclient:4.5.2'
    compile 'net.logstash.logback:logstash-logback-encoder:4.7'

    testCompile libraries.cucumber
    testCompile libraries.groovy
    testCompile libraries.jackson
    testCompile libraries.jersey
    testCompile libraries.json
    testCompile libraries.restassured
    testCompile libraries.spock
    testCompile libraries.springTest
    testCompile libraries.testUtils
}

springboot{
    port = 8001
}

test {
    exclude 'acceptance/**'
}

task acceptanceTest(type: Test) {
    description 'Runs the acceptance tests.'
    group 'verification'
    include 'acceptance/**'
    finalizedBy aggregate
    outputs.upToDateWhen {false}
}

processResources {
    filesMatching("**/application.properties") {
        expand( project.properties )
    }
}

clean.doFirst{
    delete 'pttg-income-proving-ui.log'
}

tasks.withType(JavaCompile) {

    options.fork = true  // Fork your compilation into a child process
    options.forkOptions.setMemoryMaximumSize("256m")
}

tasks.withType(GroovyCompile) {

    options.fork = true  // Fork your compilation into a child process
    options.forkOptions.setMemoryMaximumSize("256m")
}

test {
    maxHeapSize = "256m"
}
